version: "3.8"

services:
  # MongoDB database service
  mongodb:
    image: mongo:latest
    container_name: atlas-chat-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Security enhancements
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL database service
  postgres:
    image: postgres:latest
    container_name: atlas-chat-postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Security and performance enhancements
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis cache service
  redis:
    image: redis:latest
    container_name: atlas-chat-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Security enhancements
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    container_name: atlas-chat-backend
    restart: always
    depends_on:
      mongodb:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database configurations
      MONGODB_URI: mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb:27017/atlas-chat?authSource=admin
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # API configurations
      API_HOST: 0.0.0.0
      API_PORT: 8000
      # Security configurations
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      # E2B configurations
      E2B_API_KEY: ${E2B_API_KEY}
      # OpenAI configurations
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Other configurations
      LOG_LEVEL: ${LOG_LEVEL}
      ENVIRONMENT: ${ENVIRONMENT}
    volumes:
      - backend_data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Performance and security enhancements
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # E2B Code Interpreter service
  e2b-codeinterpreter:
    build:
      context: ./e2b-codeinterpreter
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT}
    container_name: atlas-chat-e2b-codeinterpreter
    restart: always
    environment:
      E2B_API_KEY: ${E2B_API_KEY}
      SERVICE_HOST: 0.0.0.0
      SERVICE_PORT: 8080
      LOG_LEVEL: ${LOG_LEVEL}
      ENVIRONMENT: ${ENVIRONMENT}
      # Add OpenAI API key for Agent SDK integration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - e2b_data:/app/data
      - ./e2b-codeinterpreter/logs:/app/logs
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Performance and security enhancements
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Frontend client service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${API_BASE_URL}
        VITE_E2B_CODEINTERPRETER_URL: ${E2B_CODEINTERPRETER_URL}
        NODE_ENV: production
    container_name: atlas-chat-frontend
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      e2b-codeinterpreter:
        condition: service_healthy
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Performance enhancements
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy service
  nginx:
    image: nginx:latest
    container_name: atlas-chat-nginx
    restart: always
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
      e2b-codeinterpreter:
        condition: service_healthy
    ports:
      - "${NGINX_PORT}:80"
      - "${NGINX_SSL_PORT}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/cache:/var/cache/nginx
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    # Security enhancements
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus monitoring service
  prometheus:
    image: prom/prometheus:latest
    container_name: atlas-chat-prometheus
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    networks:
      - atlas-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security enhancements
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana dashboard service
  grafana:
    image: grafana/grafana:latest
    container_name: atlas-chat-grafana
    restart: always
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel"
    networks:
      - atlas-network
    healthcheck:
      test:
        ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Security enhancements
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service
  backup:
    image: alpine:latest
    container_name: atlas-chat-backup
    restart: always
    volumes:
      - mongodb_data:/data/mongodb:ro
      - postgres_data:/data/postgres:ro
      - redis_data:/data/redis:ro
      - backend_data:/data/backend:ro
      - e2b_data:/data/e2b:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: sh -c "chmod +x /backup.sh && crond -f"
    environment:
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 0 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-7}
    networks:
      - atlas-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/mongodb
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/redis
      o: bind
  backend_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/backend
      o: bind
  e2b_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/e2b
      o: bind
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/prometheus
      o: bind
  grafana_data:
    driver: local
    driver_opts:
      type: none
      device: ${DATA_PATH}/grafana
      o: bind

networks:
  atlas-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
